[{"C:\\another\\extra\\Coding\\Uber_code 1\\Code\\babylon\\src\\main.ts":"1","C:\\another\\extra\\Coding\\Uber_code 1\\Code\\babylon\\src\\App.vue":"2","C:\\another\\extra\\Coding\\Uber_code 1\\Code\\babylon\\src\\components\\BabylonExamples.vue":"3","C:\\another\\extra\\Coding\\Uber_code 1\\Code\\babylon\\src\\BabylonExamples\\Controller.ts":"4"},{"size":90,"mtime":1724015066318,"results":"5","hashOfConfig":"6"},{"size":537,"mtime":1724634742583,"results":"7","hashOfConfig":"6"},{"size":668,"mtime":1726708742205,"results":"8","hashOfConfig":"6"},{"size":7789,"mtime":1731224331388,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1s1dax7",{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},"C:\\another\\extra\\Coding\\Uber_code 1\\Code\\babylon\\src\\main.ts",[],[],"C:\\another\\extra\\Coding\\Uber_code 1\\Code\\babylon\\src\\App.vue",[],[],"C:\\another\\extra\\Coding\\Uber_code 1\\Code\\babylon\\src\\components\\BabylonExamples.vue",["22"],"<template>\n  \n    <h3>Babylon Examples</h3>\n    <canvas></canvas>\n    \n \n  \n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue';\nimport { FpController } from '@/BabylonExamples/Controller';\nexport default defineComponent({\n  name: 'BabylonExamples',\n  mounted(){\n    const canvas = document.querySelector('canvas')!\n    \n    \n    \n\n\n    new FpController(canvas)\n  }\n});\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n\n<style scoped>\n@import url(\"https://fonts.googleapis.com/css2?family=Roboto+Condensed&family=Roboto:wght@100;700&display=swap\");\n\n\ncanvas {\n  width:100% ;\n  height: 100%;\n\n  color: blue;\n}\n\n\n\n</style>","C:\\another\\extra\\Coding\\Uber_code 1\\Code\\babylon\\src\\BabylonExamples\\Controller.ts",["23","24","25","26","27","28","29","30","31","32","33"],"import {Scene, Engine, FreeCamera, Vector3, HemisphericLight, MeshBuilder, StandardMaterial, Texture, CubeTexture, PBRMaterial, SceneLoader, AbstractMesh, ActionManager, SetValueAction, InterpolateValueAction, IncrementValueAction, Mesh, CannonJSPlugin, PhysicsImpostor, Size, Color3, int} from \"@babylonjs/core\"\r\n\r\nimport \"@babylonjs/loaders\"\r\n\r\nimport * as CANNON from \"cannon\"\r\n\r\nexport class FpController {\r\n\r\n    scene: Scene\r\n    engine: Engine\r\n    box!: AbstractMesh\r\n    sphere!:AbstractMesh\r\n    cylinder!:AbstractMesh\r\n    ground!:AbstractMesh\r\n    sphereMat!: PBRMaterial\r\n    x: int\r\n\r\n    \r\n\r\n    constructor( private canvas:HTMLCanvasElement){\r\n\r\n        this.x = Math.floor( Math.random() * 2) +1;\r\n\r\n        this.engine =new Engine(this.canvas, true)\r\n        this.scene = this.CreateScene()\r\n\r\n        \r\n        if (this.x === 2){\r\n            this.CreateEnvironment()\r\n        }\r\n        if (this.x === 1){\r\n            this.CreateEnvironment2()\r\n            this.CreateEnvironment3()\r\n\r\n        }  \r\n        \r\n        \r\n        \r\n        \r\n\r\n        \r\n\r\n        // this.CreateImposter()\r\n\r\n        this.CreateController()\r\n\r\n        // this.Triggered()\r\n        \r\n        this.engine.runRenderLoop(()=>{\r\n            this.scene.render()\r\n        })\r\n\r\n        \r\n    }\r\n\r\n\r\n\r\n    CreateScene():Scene {\r\n        const scene = new Scene(this.engine)\r\n        \r\n        const light = new HemisphericLight(\"hemiLight\",new Vector3(0,1,0), this.scene)\r\n\r\n        light.intensity = 5\r\n\r\n        scene.onPointerDown =  (evt)=>{\r\n\r\n            if(evt.button === 0) this.engine.enterPointerlock()\r\n\r\n            if(evt.button === 1) this.engine.exitPointerlock()\r\n\r\n\r\n        }\r\n         \r\n\r\n        const FPS = 60\r\n\r\n        const gravity = -9.81\r\n\r\n        scene.gravity = new Vector3(0, FPS/gravity,0)\r\n\r\n        scene.collisionsEnabled = true\r\n\r\n        scene.enablePhysics(new Vector3(0,-9.81,0), new CannonJSPlugin(true,10,CANNON))\r\n\r\n\r\n\r\n        // const ground = MeshBuilder.CreateGround(\"Ground\", {width:15, height:15}, this.scene)\r\n\r\n        // ground.position.z =5\r\n\r\n        \r\n\r\n        // const ball = MeshBuilder.CreateSphere(\"ball\", {diameter:2}, this.scene)\r\n        // ball.position.z = 8\r\n        // ball.position.y = 1\r\n\r\n        // ball.checkCollisions = true\r\n\r\n\r\n        \r\n        // ball.material = this.CreateBallMaterial()\r\n\r\n        return scene\r\n    }\r\n   \r\n    CreateBallMaterial():PBRMaterial{\r\n        const pbr = new PBRMaterial(\"pbr\",this.scene)\r\n\r\n        pbr.albedoTexture = new Texture(\"./Textures/Metal plate/metal_plate_diff_1k.jpg\",this.scene)\r\n\r\n        pbr.bumpTexture = new Texture(\"./Textures/Metal plate/metal_plate_nor_gl_1k.jpg\", this.scene)\r\n\r\n        pbr.invertNormalMapX = true\r\n        pbr.invertNormalMapY = true\r\n\r\n        pbr.useAmbientOcclusionFromMetallicTextureRed = true\r\n        pbr.useRoughnessFromMetallicTextureGreen = true\r\n        pbr.useMetallnessFromMetallicTextureBlue = true\r\n\r\n\r\n        pbr.metallicTexture = new Texture(\"./Textures/Metal plate/metal_plate_arm_1k.jpg\", this.scene)\r\n\r\n\r\n        return pbr \r\n        \r\n    }\r\n\r\n    async CreateEnvironment(): Promise<void> {\r\n        const { meshes } = await SceneLoader.ImportMeshAsync(\r\n          \"\",\r\n          \"./Models/\",\r\n          \"round.glb\",\r\n          this.scene\r\n        );\r\n\r\n        \r\n\r\n        meshes.map(mesh=>{\r\n            mesh.checkCollisions = true\r\n        })\r\n\r\n    }\r\n    async CreateEnvironment3(): Promise<void> {\r\n        \r\n\r\n\r\n    \r\n\r\n        const { meshes } = await SceneLoader.ImportMeshAsync(\r\n          \"\",\r\n          \"./Check/\",\r\n          \"Cube.glb\",\r\n          \r\n          this.scene\r\n        );\r\n\r\n        console.log(\"Cube\",{meshes})\r\n        \r\n        \r\n\r\n        meshes.map(mesh=>{\r\n            mesh.checkCollisions = true\r\n\r\n            \r\n\r\n        \r\n        })\r\n\r\n    }\r\n\r\n    async CreateEnvironment2(): Promise<void> {\r\n        \r\n\r\n\r\n    \r\n\r\n        const { meshes } = await SceneLoader.ImportMeshAsync(\r\n          \"\",\r\n          \"./Check/\",\r\n          \"theater.glb\",\r\n          \r\n          this.scene\r\n        );\r\n\r\n        console.log(\"meshes\",{meshes})\r\n        \r\n        \r\n\r\n        meshes.map(mesh=>{\r\n            mesh.checkCollisions = true\r\n\r\n            \r\n\r\n        //    const mam = mesh.actionManager\r\n\r\n        //     mam?.registerAction(new InterpolateValueAction(ActionManager.OnPointerOverTrigger,camera,\"position\", new Vector3(mesh.position.x,mesh.position.y,mesh.position.z)))\r\n        })\r\n\r\n    }\r\n\r\n    CreateController():void {\r\n        const camera = new FreeCamera(\"camera\", new Vector3(0,5,-7), this.scene)\r\n        camera.attachControl()\r\n\r\n        camera.speed = .5\r\n\r\n        camera.angularSensibility =4500\r\n\r\n\r\n        camera.applyGravity = true\r\n\r\n        camera.checkCollisions = true\r\n\r\n        camera.ellipsoid = new Vector3(1,.7,1)\r\n\r\n        camera.minZ = 0.55\r\n        \r\n        \r\n\r\n    \r\n        \r\n\r\n        \r\n\r\n        camera.keysUp.push(87)\r\n        camera.keysLeft.push(65)\r\n        camera.keysDown.push(83)\r\n        camera.keysRight.push(68)\r\n        \r\n    }\r\n\r\n\r\n\r\n    // CreateImposter(): void{\r\n    //     this.sphere = MeshBuilder.CreateSphere(\"sphere\", {diameter:2})\r\n        \r\n    //     this.sphere.checkCollisions =true\r\n\r\n    //     this.sphere.position = new Vector3(0,7,0)\r\n\r\n    //     this.sphere.physicsImpostor = new PhysicsImpostor(this.sphere,PhysicsImpostor.SphereImpostor, {mass:1,friction:1,restitution:.7})\r\n\r\n        \r\n        \r\n        \r\n\r\n    //     // this.box = MeshBuilder.CreateBox(\"box\", {size:1, updatable:true})\r\n\r\n    //     // this.box.checkCollisions =true\r\n\r\n    //     // this.box.physicsImpostor = new PhysicsImpostor(this.box,PhysicsImpostor.BoxImpostor, {mass:1,friction:1,restitution:1.1})\r\n\r\n        \r\n\r\n    //     // this.box.position = new Vector3(0,1,0)\r\n\r\n    //     this.ground = MeshBuilder.CreateGround(\"ground\", {width:45,height:45})\r\n\r\n    //     this.ground.isVisible = false\r\n    //     this.ground.position = new Vector3(0,.3,0)\r\n\r\n    //     this.ground.physicsImpostor = new PhysicsImpostor(this.ground,PhysicsImpostor.BoxImpostor, {mass:0,friction:5,restitution:1.2})\r\n\r\n\r\n    //     // this.box.physicsImpostor.registerOnPhysicsCollide(this.sphere.physicsImpostor,this.DetectCollisions)\r\n\r\n    //     // this.sphere.physicsImpostor.registerOnPhysicsCollide(this.box.physicsImpostor,this.DetectCollisions)\r\n    //     // this.sphere.physicsImpostor.unregisterOnPhysicsCollide( this.ground.physicsImpostor,this.DetectCollisions)\r\n\r\n    // }\r\n\r\n    // DetectCollisions(BoxCol:PhysicsImpostor, ColAgainst:any):void {\r\n\r\n\r\n    //     const matty = new StandardMaterial(\"matty\", this.scene)\r\n    //     matty.diffuseColor = new Color3(.78,.03,.09);\r\n    //     const matty2 = new StandardMaterial(\"matty\", this.scene)\r\n    //     matty2.diffuseColor = new Color3(.08,.3,.9);\r\n\r\n\r\n\r\n    //     // BoxCol.object.scaling = new Vector3 (2,2,2)\r\n\r\n    //     // BoxCol.setScalingUpdated()\r\n\r\n\r\n    //     (ColAgainst.object as AbstractMesh).material = matty;\r\n\r\n    //     // (BoxCol.object as AbstractMesh).material = matty2;\r\n\r\n    // }\r\n\r\n    // Triggered():void{\r\n\r\n    //     const box = MeshBuilder.CreateBox(\"box\", {width:2, height: 1,depth:2})\r\n\r\n    //     const Mat =  new StandardMaterial(\"red\",this.scene)\r\n\r\n    //     Mat.diffuseColor = new Color3(.4,.5,.75)\r\n\r\n    //     box.position.y = .5\r\n\r\n    //     box.visibility = .35\r\n\r\n    //     let counter = 0;\r\n\r\n        \r\n\r\n\r\n\r\n    //     this.scene.registerBeforeRender(()=>{\r\n    //         if(box.intersectsMesh(this.sphere)) counter++;\r\n    //         if (counter >103)this.sphere.material = Mat\r\n    //         if (counter >105)this.sphere.scaling = new Vector3(2,2,2)\r\n            \r\n    //     })\r\n\r\n\r\n        \r\n\r\n        \r\n\r\n        \r\n\r\n        \r\n\r\n\r\n\r\n    // }\r\n\r\n}",{"ruleId":"34","severity":1,"message":"35","line":16,"column":20,"nodeType":"36","messageId":"37","endLine":16,"endColumn":53},{"ruleId":"38","severity":1,"message":"39","line":1,"column":63,"nodeType":"40","messageId":"41","endLine":1,"endColumn":74},{"ruleId":"38","severity":1,"message":"42","line":1,"column":76,"nodeType":"40","messageId":"41","endLine":1,"endColumn":92},{"ruleId":"38","severity":1,"message":"43","line":1,"column":103,"nodeType":"40","messageId":"41","endLine":1,"endColumn":114},{"ruleId":"38","severity":1,"message":"44","line":1,"column":156,"nodeType":"40","messageId":"41","endLine":1,"endColumn":169},{"ruleId":"38","severity":1,"message":"45","line":1,"column":171,"nodeType":"40","messageId":"41","endLine":1,"endColumn":185},{"ruleId":"38","severity":1,"message":"46","line":1,"column":187,"nodeType":"40","messageId":"41","endLine":1,"endColumn":209},{"ruleId":"38","severity":1,"message":"47","line":1,"column":211,"nodeType":"40","messageId":"41","endLine":1,"endColumn":231},{"ruleId":"38","severity":1,"message":"48","line":1,"column":233,"nodeType":"40","messageId":"41","endLine":1,"endColumn":237},{"ruleId":"38","severity":1,"message":"49","line":1,"column":255,"nodeType":"40","messageId":"41","endLine":1,"endColumn":270},{"ruleId":"38","severity":1,"message":"50","line":1,"column":272,"nodeType":"40","messageId":"41","endLine":1,"endColumn":276},{"ruleId":"38","severity":1,"message":"51","line":1,"column":278,"nodeType":"40","messageId":"41","endLine":1,"endColumn":284},"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","@typescript-eslint/no-unused-vars","'MeshBuilder' is defined but never used.","Identifier","unusedVar","'StandardMaterial' is defined but never used.","'CubeTexture' is defined but never used.","'ActionManager' is defined but never used.","'SetValueAction' is defined but never used.","'InterpolateValueAction' is defined but never used.","'IncrementValueAction' is defined but never used.","'Mesh' is defined but never used.","'PhysicsImpostor' is defined but never used.","'Size' is defined but never used.","'Color3' is defined but never used."]